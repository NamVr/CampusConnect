'use server';
/**
 * @fileOverview This file defines a Genkit flow for answering technical questions using Gemini.
 *
 * - askGemini - A function that takes a user's question as input and returns Gemini's answer.
 * - AskGeminiInput - The input type for the askGemini function.
 * - AskGeminiOutput - The return type for the askGemini function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const AskGeminiInputSchema = z.object({
  userQuery: z.string().describe('The technical question asked by the user.'),
});
export type AskGeminiInput = z.infer<typeof AskGeminiInputSchema>;

const AskGeminiOutputSchema = z.object({
  answer: z.string().describe('The answer generated by Gemini.'),
});
export type AskGeminiOutput = z.infer<typeof AskGeminiOutputSchema>;

export async function askGemini(input: AskGeminiInput): Promise<AskGeminiOutput> {
  return askGeminiFlow(input);
}

const askGeminiPrompt = ai.definePrompt({
  name: 'askGeminiPrompt',
  input: {schema: AskGeminiInputSchema},
  output: {schema: AskGeminiOutputSchema},
  prompt: `You are a helpful AI assistant specializing in answering technical questions.  Please answer the following question to the best of your ability.\n\nQuestion: {{{userQuery}}}`,
});

const askGeminiFlow = ai.defineFlow(
  {
    name: 'askGeminiFlow',
    inputSchema: AskGeminiInputSchema,
    outputSchema: AskGeminiOutputSchema,
  },
  async (input, streamingCallback) => {
    let retries = 3;
    let lastError: any;
    while (retries > 0) {
      try {
        const {output} = await askGeminiPrompt(input);
        return output!;
      } catch (e) {
        lastError = e;
        console.log(`askGeminiFlow failed, retrying...`, e);
        retries--;
        await new Promise(resolve => setTimeout(resolve, 1000));
      }
    }
    throw lastError;
  }
);
